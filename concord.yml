configuration:
  dependencies:
    - mvn://org.python:jython-standalone:2.7.1
    - mvn://org.codehaus.groovy:groovy-all:pom:2.5.2

  arguments:
    entryPoint: deploy
    version: "1.0"
    branch: "develop"
    commitSHA: ""
    kittFiles: [ "test-env-cloud.yml", "release-8972-cloud.yml" ]
    organization: "Hawkeye"
    kittFilesGraph: [ ["test-env-cloud.yml" ], [ "test-env-cloud.yml", "release-8972-cloud.yml"], [ "test-env-cloud.yml", "release-8972-cloud.yml", "release-3040-cloud.yml" ] ]
    kittInfo:
      kittCompletedDeployments: [ ]
    deploymentUsingGraph: false
    completeIndicator: 0
    repo: "test-pipeline"
    baseProfile: { }
    event: "push"
    channelName: "hawkeye-kitt"

forms:
  deploymentForm:

flows:
  default:
    - log: "Hawkeye-Concord | This is the default flow"

  kitt-deploy:
    - log: "Hawkeye Concord | Reading contents of kitt file ${item}"
    - expr: ${stageRefs[0]}
      out: currentStage
    - log: "Hawkeye Concord | Calling onlyDeploy Repo=${repo} Branch=${branch} Version=${version} BaseProfile=${baseProfile}"
    - checkpoint: "Deploy_${item}_${currentStage}"
    - task: concord
      in:
        org: Default
        project: strati
        repo: kitt.master
        entryPoint: onlyDeploy
        action: start
        arguments:
          onlyDeployOrg: Hawkeye
          onlyDeployRepo: ${repo}
          onlyDeployBranch: ${branch}
          onlyDeployVersion: ${version}
          onlyDeployKittYmlPath: ${item}
          stageRefs: ${stageRefs}
          baseProfile: ${baseProfile}
    - set:
        concordLink: http://localhost:8001/#/process/${jobs[0]}
        deploymentInfo:
          stage: ${currentStage}
          kittFile: ${item}
          jobId: ${jobs[0]}
    - ${jobIds.addAll(jobs)}
    - ${deployments.add(deploymentInfo)}

  filter-kitt-files:
    - set:
        currentStage: ${stageRefs[0]}
    - log: "Hawkeye Concord | Deployment Kitt Files Completed ${kittInfo.kittCompletedDeployments}"
    - log: "Current Stage: ${currentStage} and File: ${item}"
    - expr: ${kittInfo.kittCompletedDeployments.stream().filter(s -> currentStage.equals(s.stage) && item.equals(s.kittFile)).toList().size()}
      out: stageKittFileAlreadyProcessed
    - log: "Hawkeye Concord | Value of already staged: ${stageKittFileAlreadyProcessed}"
    - if: ${stageKittFileAlreadyProcessed == 1}
      then:
        - log: "Hawkeye Concord | Deployment for Stage: ${currentStage} and Kitt File: ${item} already deployed ... skipping"
      else:
        - ${toDeploy.add(item)}

  deploy-stage:
    - log: "Hawkeye Concord | Deploying to stage ${stageName} with baseProfile=${baseProfile}"
    - checkpoint: "Deploy_${stageName}"
    - set:
        jobIds: [ ]
        deployments: [ ]
        toDeploy: [ ]
    - if: ${deploymentUsingGraph == true}
      then:
        - call: filter-kitt-files
          withItems: ${kittFiles}
          in:
            stageRefs: [ "${stageName}" ]
        - log: "Hawkeye Concord | deploy-stage KittFiles value after filter: ${kittFiles}"
      else:
        - log: "Hawkeye Concord | Using normal existing flow"
        - ${toDeploy.addAll(kittFiles)}
    - call: kitt-deploy
      withItems: ${toDeploy}
      in:
        stageRefs: [ "${stageName}" ]
    - expr: ${jobIds.size()}
      out: jobsCount
    - if: ${jobsCount > 0}
      then:
        - ${concord.suspendForCompletion(jobIds)}
        - set:
            statusMap: ${concord.waitForCompletion(jobIds)}
            jobsStatus: "${statusMap.entrySet().stream().map(e -> {'jobId' : e.key, 'status' : e.value.status}).toList()}"
            failedJobs: "${statusMap.entrySet().stream().filter(e -> !e.value.status.toString().equals('FINISHED')).map(e -> {'jobId' : e.key, 'status' : e.value.status}).toList()}"
        - log: "Hawkeye Concord | Jobs Status: ${jobsStatus}"
        - if: ${failedJobs.size() != 0}
          then:
            - log: "Hawkeye Concord | Jobs ${failedJobs} did not complete successfully"
            - throw: "Jobs ${failedJobs} did not complete successfully"
          else:
            - log: "Hawkeye Concord | All jobs completed successfully"
            - set:
                childJobId: ${jobIds[0]}
            - ${kittInfo.kittCompletedDeployments.addAll(deployments)}
      else:
        - log: "Hawkeye Concord | There are no valid deployments at this stage ${stageRefs}"
    - log: "Hawkeye Concord | Finished deploying to stage, ${stageName}, with baseProfile=${baseProfile}"
    - ${jobIds.clear()}
    - ${deployments.clear()}
    - ${toDeploy.clear()}

  deploy-by-ref:
    - log: "Hawkeye Concord | deploy-by-ref: ${item}"
    - log: "========================================"
    - if: ${branch.matches(item)}
      then:
        - log: "Hawkeye Concord | Continuing to process matched ref: ${item}"
        - call: deploy-stage
          in:
            stageName: ${stageName}
      else:
        - log: "Hawkeye Concord | Skipping unmatched ref: ${item}"

  deploy-by-stage:
    - log: "Hawkeye Concord | deploy-by-stage ${item.name} - ${item.refs}"
    - log: "============================================================="
    - set:
        stageName: ${item.name}
    - call: deploy-by-ref
      in:
        stageName: ${stageName}
        baseProfile:
          deploy:
            skip: false
      withItems: ${item.refs}

  displayDeploy:
    - form: deploymentForm
      values:
        processId: ${txId}
        repo: ${repo}
        branch: ${branch}
        version: ${version}
        kittFilesGraph: ${kittFilesGraph}
        organization: ${organization}
        executedBy: ${currentUser.username}
    - expr: ${deploymentForm.onlySelectedKittFiles.stream().filter(done -> done.contains('Done')).toList().size()}
      out: deploymentDone
    - expr: ${deploymentForm.onlySelectedKittFiles.stream().filter(done -> done.contains('Default')).toList().size()}
      out: useSuppliedKittFiles
    - expr: ${deploymentForm.onlySelectedKittFiles.stream().flatMap(str -> str.split(",").stream()).toList()}
      out: selectedKittFiles

    - if: ${deploymentDone == 0}
      then:
        - log: "Hawkeye Concord | Deployment is not done .. checking to see if using defaults"
        - if: ${useSuppliedKittFiles != 1}
          then:
            - log: "Hawkeye Concord | Not using the default kitt files"
            - set:
                kittFiles: ${selectedKittFiles}
      else:
        - set:
            kittFiles: []
            completeIndicator: 1

  continue-deploy:
    - checkpoint: continue-deployment
    - set:
        kittFiles: ${kittFilesBackup}
    - call: displayDeploy
    - if: ${completeIndicator < 1}
      then:
        - if: ${ event == "push" }
          then:
            - set:
                itemByStage:
                  name: "dev"
                  refs: [ "develop" ]
                itemsByStage: [ ]
            - ${itemsByStage.add(itemByStage)}
            - call: deploy-by-stage
              withItems: ${itemsByStage}
            - call: continue-deploy

  deploy:
    - log: "Hawkeye Concord | !!! GITHUB EVENT !!! ${event}"
    - checkpoint: "Start"
    - expr: ${kittFilesGraph.size()}
      out: graphSize
    - if: ${graphSize > 0}
      then:
        - set:
            deploymentUsingGraph: true
            kittFilesBackup: ${kittFiles}
        - call: displayDeploy
    - if: ${completeIndicator < 1}
      then:
        - if: ${ event == "push" }
          then:
            - log: "Hawkeye Concord | Deploying non PR stages"
            - set:
                itemByStage:
                  name: "dev"
                  refs: [ "develop" ]
                itemsByStage: [ ]
            - ${itemsByStage.add(itemByStage)}
            - call: deploy-by-stage
              withItems: ${itemsByStage}
            - if: ${deploymentUsingGraph == true}
              then:
                - call: continue-deploy
    - log: "Hawkeye Concord | Deployment Kitt Files Completed ${kittInfo.kittCompletedDeployments}"
    - log: "Hawkeye Concord | Deployment through pipeline finished"

  onFailure:
    - log: "Hawkeye Concord | Pipeline failed to complete"